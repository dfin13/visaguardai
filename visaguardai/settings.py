"""
Django settings for visaguardai project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-^res4t=kku7n*d#m@ajk2&v=exf@!^71wbehih^zcvwd-okonl')

# Field encryption key for encrypted model fields (API keys, secrets)
# Must be a 32 url-safe base64-encoded bytes (Fernet key)
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
FIELD_ENCRYPTION_KEY = os.getenv('FIELD_ENCRYPTION_KEY', 'H6mpeKLeMEhUoxTnaNyY4m026T6fOX6y1ut6pLxABMk=')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "visaguardai.com",
    "www.visaguardai.com",
    "148.230.110.112",
    "192.168.18.135"
]

# Security Settings for Production
SECURE_SSL_REDIRECT = not DEBUG  # Redirect HTTP to HTTPS in production
SESSION_COOKIE_SECURE = not DEBUG  # Send session cookie only over HTTPS
CSRF_COOKIE_SECURE = not DEBUG  # Send CSRF cookie only over HTTPS
CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF cookie
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME-sniffing
SECURE_BROWSER_XSS_FILTER = True  # Enable browser XSS filtering

CSRF_TRUSTED_ORIGINS = [
    "http://visaguardai.com",
    "https://visaguardai.com",
    "http://www.visaguardai.com",
    "https://www.visaguardai.com",
    "http://148.230.110.112",
    "https://148.230.110.112",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    
    # Local apps
    'core',
    'dashboard',
    'authentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'visaguardai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],  # Directory for custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'visaguardai.wsgi.application'

SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'visaguard_db'),
        'USER': os.getenv('DB_USER', 'davidfinney'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

# Cache Configuration - Use database cache for persistence across workers
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'django_cache_table',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Authentication settings

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# ...existing code...
from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# ...existing code...

# Stripe Settings
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY_TEST = os.getenv('STRIPE_SECRET_KEY_TEST')
STRIPE_PUBLISHABLE_KEY_TEST = os.getenv('STRIPE_PUBLISHABLE_KEY_TEST')
STRIPE_SECRET_KEY_LIVE = os.getenv('STRIPE_SECRET_KEY_LIVE')
STRIPE_PUBLISHABLE_KEY_LIVE = os.getenv('STRIPE_PUBLISHABLE_KEY_LIVE')

# API Keys
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
APIFY_API_KEY = os.getenv('APIFY_API_KEY')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# Google OAuth
GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID')
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET')
# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
LOGIN_URL = '/auth/login/'          # This fixes redirection when user is not logged in

LOGIN_REDIRECT_URL = '/dashboard/'

# Twitter credentials (from environment variables)
TWITTER_USERNAME = os.getenv('TWITTER_USERNAME', 'befap77564')
TWITTER_PASSWORD = os.getenv('TWITTER_PASSWORD')

# Gemini API key
# GEMINI_API_KEY is loaded from environment variables above

# Debug screenshots directory
import os
DEBUG_SCREENSHOTS_DIR = os.path.join(BASE_DIR, 'debug_screenshots')
os.makedirs(DEBUG_SCREENSHOTS_DIR, exist_ok=True)
# ...existing code...
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'visaguardai@gmail.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# For API expiry alert system
ALERT_GMAIL_USER = EMAIL_HOST_USER
ALERT_GMAIL_PASSWORD = EMAIL_HOST_PASSWORD

# At the end of urls.py

# Django Allauth Configuration
SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings
ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Disable email verification
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_LOGIN_ON_GET = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGOUT_REDIRECT_URL = '/auth/login/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/dashboard/'  # After signup
LOGIN_REDIRECT_URL = '/dashboard/'  # After login
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Login with email
ACCOUNT_UNIQUE_EMAIL = True  # Ensure unique emails

# Social account settings
SOCIALACCOUNT_EMAIL_REQUIRED = True  # Require email from OAuth provider
SOCIALACCOUNT_QUERY_EMAIL = True  # Query email if not provided
SOCIALACCOUNT_LOGIN_ON_GET = True  # Allow login via GET (OAuth callback)
SOCIALACCOUNT_AUTO_SIGNUP = True  # Auto create account for new OAuth users
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'  # Skip email verification for OAuth
SOCIALACCOUNT_STORE_TOKENS = True  # Store OAuth tokens

# Custom adapters for OAuth and account handling
ACCOUNT_ADAPTER = 'dashboard.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'dashboard.adapters.CustomSocialAccountAdapter'

# Google OAuth settings (development)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

# Content Security Policy settings for Google OAuth
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "https://accounts.google.com", "https://ssl.gstatic.com")
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://accounts.google.com", "https://ssl.gstatic.com")
CSP_IMG_SRC = ("'self'", "data:", "https:", "https://ssl.gstatic.com")
CSP_CONNECT_SRC = ("'self'", "https://accounts.google.com")
CSP_FRAME_SRC = ("'self'", "https://accounts.google.com")
